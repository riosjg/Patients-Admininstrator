{"version":3,"sources":["components/Form.js","components/Appointment.js","App.js","serviceWorker.js","index.js"],"names":["Form","createAppointment","useState","pet","owner","date","time","symptoms","appointment","setAppointment","error","setError","updateState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Appointment","deleteAppointment","onClick","App","initialAppointments","JSON","parse","localStorage","getItem","appointments","setAppointments","useEffect","setItem","stringify","filter","title","length","console","log","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.391ff665.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport uuid from 'uuid/v4'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Form = ({createAppointment}) => {\r\n\r\n    // Create appointment State\r\n    const [appointment, setAppointment] = useState({\r\n        pet: '',\r\n        owner: '',\r\n        date: '',\r\n        time: '',\r\n        symptoms: ''\r\n    })\r\n\r\n    const [error, setError] = useState(false)\r\n\r\n    // Function that executes when user types on input\r\n    const updateState = e => {\r\n        setAppointment({\r\n            ...appointment,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    // Submit form\r\n    const submitAppointment = e => {\r\n        e.preventDefault();\r\n        if(pet.trim() === '' || owner.trim() === '' || date.trim() === '' || time.trim() === '' || symptoms.trim() === ''){\r\n            setError(true);\r\n            return;\r\n        }\r\n\r\n        setError(false);\r\n\r\n        appointment.id = uuid();\r\n\r\n        //add appointment to  appointments array\r\n        createAppointment(appointment);\r\n\r\n        //clean form\r\n        setAppointment({\r\n            pet: '',\r\n            owner: '',\r\n            date: '',\r\n            time: '',\r\n            symptoms: ''\r\n        })\r\n    }\r\n\r\n    // Values destructuring\r\n    const { pet, owner, date, time, symptoms} = appointment;\r\n\r\n    return ( \r\n        <>\r\n            <h2>Create appointment</h2>\r\n\r\n            { error ? <p className=\"alerta-error\">Every field must be completed</p>\r\n            : null}\r\n\r\n            <form\r\n                onSubmit={submitAppointment}\r\n            >\r\n                <label>Pet's name *</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"pet\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Pet name\"\r\n                    onChange={updateState}\r\n                    value={pet}\r\n                />\r\n\r\n                <label>Owner's name *</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"owner\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Owner's name\"\r\n                    onChange={updateState}\r\n                    value={owner}\r\n                />\r\n\r\n                <label>Date *</label>\r\n                <input\r\n                    type=\"date\"\r\n                    name=\"date\"\r\n                    className=\"u-full-width\"\r\n                    onChange={updateState}\r\n                    value={date}\r\n                />\r\n\r\n                <label>Time *</label>\r\n                <input\r\n                    type=\"time\"\r\n                    name=\"time\"\r\n                    className=\"u-full-width\"\r\n                    onChange={updateState}\r\n                    value={time}\r\n                />\r\n\r\n                <label>Symptoms *</label>\r\n                <textarea\r\n                    className=\"u-full-width\"\r\n                    name=\"symptoms\"\r\n                    onChange={updateState}\r\n                    value={symptoms}\r\n                />\r\n                \r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >Add appointment</button>\r\n            </form>\r\n        </>\r\n     );\r\n}\r\n\r\nForm.propTypes = {\r\n    createAppointment: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Form;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Appointment = ({appointment, deleteAppointment}) => {\r\n    const { pet, owner, date, time, symptoms, id} = appointment;\r\n    return(\r\n    <div className=\"cita\">\r\n        <p>Pet: <span>{pet}</span></p>\r\n        <p>Owner: <span>{owner}</span></p>\r\n        <p>Date: <span>{date}</span></p>\r\n        <p>Time: <span>{time}</span></p>\r\n        <p>Symptoms: <span>{symptoms}</span></p>\r\n\r\n        <button\r\n            className=\"button eliminar u-full-width\"\r\n            onClick = { () => deleteAppointment(id)}\r\n        >Eliminar</button>\r\n    </div>\r\n    )\r\n}\r\n\r\nAppointment.propTypes = {\r\n    appointment: PropTypes.object.isRequired,\r\n    deleteAppointment: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Appointment","import React, {useState, useEffect} from 'react';\nimport Form from './components/Form'\nimport Appointment from './components/Appointment'\n\nfunction App() {\n\n  let initialAppointments = JSON.parse(localStorage.getItem('appointments'));\n  if(!initialAppointments){\n    initialAppointments = [];\n  }\n\n  const [appointments, setAppointments] = useState(initialAppointments);\n\n  useEffect( () => {\n    if(initialAppointments){\n      localStorage.setItem('appointments', JSON.stringify(appointments));\n    } else{\n      localStorage.setItem('appointments', JSON.stringify([]));\n    }\n    // eslint-disable-next-line\n  }, [appointments]);\n\n  const createAppointment = appointment => {\n    setAppointments([\n      ...appointments,\n      appointment\n    ])\n    console.log(appointments)\n  }\n\n  const deleteAppointment = id => {\n    setAppointments(appointments.filter(appointment => appointment.id !== id))\n  }\n\n  const title = appointments.length === 0 ? \"There aren't any appointments\" : 'Manage your appointments'\n\n  return (\n    <>\n      <h1>Patients Administrator</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Form createAppointment={createAppointment} />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{title}</h2>\n            {appointments.map(appointment => (\n              <Appointment\n                key = {appointment.id}\n                appointment = {appointment}\n                deleteAppointment = {deleteAppointment}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}